/**
 *  Bond V2 Group Shade Driver
 *
 *  Copyright 2025 Simon Mason
 *
 * V2 Revision History (by Simon Mason)
 * 2.00 - 2025.01.01 - Initial Bond Group driver supporting group actions and state
 * 2.01 - 2025.01.01 - Added shade controls for group devices
 * 2.02 - 2025.01.01 - Enhanced group state tracking, improved position change handling for groups
 * 2.03 - 2025.01.01 - Added movement tracking and proper state aggregation for group devices
 * 2.04 - 2025.01.01 - Fixed state parsing for groups, improved refresh handling and debugging
 * 2.05 - 2025.01.01 - Implemented unknown state for stopPositionChange, removed redundant movement tracking
 * 2.06 - 2025.01.01 - Added One-Way/Two-Way communication preference with command repeat functionality
 * 2.07 - 2025.01.01 - Fixed runIn issues by switching to pauseExecution, added command cancellation logic
 * 2.08 - 2025.01.01 - Fixed position mapping: position 0 now correctly maps to closed, position 100 to open
 *
 */
metadata {
    definition (
		name: "Bond V2 Group Shade Driver", 
		namespace: "simonmason", 
		author: "Simon Mason",
		importUrl: "https://raw.githubusercontent.com/simonmason/hubitat-bond-v2/master/drivers/Bond_V2_Group_Shade_Driver.groovy"
	) {
        capability "Switch"
        capability "WindowShade"
        capability "Refresh"
		
        command "toggle"
        command "stop"
        command "setPosition", [[name: "position*", type: "NUMBER", description: "Shade position (0-100)"]]
        command "startPositionChange", [[name: "direction*", type: "ENUM", description: "Direction", constraints: ["open", "close"]]]
        command "stopPositionChange"
        command "fixGroupState", [[name:"State*", type: "ENUM", description: "Group State", constraints: ["on","off"] ] ]
		
        attribute "groupState", "string"
        attribute "position", "number"
        attribute "moving", "enum", ["opening", "closing", "stopped"]
    }
    
    preferences {
        input("communicationType", "enum", title: "Communication Type", 
              options: ["two-way": "Two-Way (Default)", "one-way": "One-Way"], 
              defaultValue: "two-way", required: true,
              description: "Select communication type for this device")
        
        input("repeatCount", "number", title: "Command Repeat Count (One-Way Only)", 
              defaultValue: 3, range: "1..5", required: false,
              description: "Number of times to repeat commands for one-way devices (1-5)")
    }
}

def installed() {
    log.debug "Bond V2 Group Shade Driver installed"
    initialize()
}

def updated() {
    log.debug "Bond V2 Group Shade Driver updated"
    initialize()
}

def initialize() {
    log.debug "Initializing Bond V2 Group Shade Driver"
    sendEvent(name: "position", value: 100) // Default position - closed
    sendEvent(name: "windowShade", value: "closed")
    sendEvent(name: "switch", value: "off")
    sendEvent(name: "groupState", value: "mixed") // Start with mixed since we don't know individual device states
    sendEvent(name: "moving", value: "stopped")
    unschedule()
    
    // Initialize command tracking
    state.currentCommand = null
    state.commandStartTime = null
}

// Switch capability methods
def on() {
    open()
}

def off() {
    close()
}

def toggle() {
	executeWithRepeat("toggle", { 
        parent.handleGroupAction(device, "TogglePower")
        // Update local state optimistically
        def currentState = device.currentValue("windowShade")
        if (currentState == "open") {
            updateShadeState("closed", 100, "off")
        } else {
            updateShadeState("open", 0, "on")
        }
    })
}

// WindowShade capability methods
def open() {
    log.debug "Opening shade group"
	executeWithRepeat("open", { 
        parent.handleGroupAction(device, "Open")
        updateShadeState("open", 0, "on")
    })
}

def close() {
    log.debug "Closing shade group"
	executeWithRepeat("close", { 
        parent.handleGroupAction(device, "Close")
        updateShadeState("closed", 100, "off")
    })
}

def stop() {
    log.debug "Stopping shade group"
    unschedule(checkMovementProgress)
    sendEvent(name: "moving", value: "stopped")
    // Stop command should never be repeated, even for one-way devices
	parent.handleGroupStop(device)
    // Refresh group state after stopping
    runIn(2, refresh)
}

def setPosition(position) {
    log.info "Setting shade group position to ${position}%"
    
    // Validate position range
    if (position < 0) position = 0
    if (position > 100) position = 100
    
    // Handle special cases first for backward compatibility
    if (position == 0) {
        log.info "Position 0: Closing shade group"
        close()
        return
    } else if (position == 100) {
        log.info "Position 100: Opening shade group"
        open()
        return
    }
    
    // Try to use proper SetPosition API call for groups
    executeWithRepeat("setPosition", { 
        parent.handleGroupSetPosition(device, position)
        
        // Update device attributes based on position
        sendEvent(name: "position", value: position)
        if (position == 0) {
            updateShadeState("closed", 0, "off")
        } else if (position == 100) {
            updateShadeState("open", 100, "on")
        } else {
            updateShadeState("partially open", position, "on")
        }
    })
}

def setLevel(level) {
    // Support for apps that use setLevel instead of setPosition
    setPosition(level)
}

def startPositionChange(direction) {
    log.debug "Starting group position change: ${direction}"
    
    sendEvent(name: "moving", value: direction == "open" ? "opening" : "closing")
    
    if (direction == "open") {
        executeWithRepeat("startPositionChange", { parent.handleGroupStartPositionChange(device, "open") })
    } else if (direction == "close") {
        executeWithRepeat("startPositionChange", { parent.handleGroupStartPositionChange(device, "close") })
    } else {
        log.warn "Invalid direction for startPositionChange: ${direction}"
    }
    
    // Don't schedule complex tracking - let stopPositionChange handle final state
}

def stopPositionChange() {
    log.debug "Stopping group position change"
    unschedule()  // Cancel any scheduled tasks
    sendEvent(name: "moving", value: "stopped")
    // Stop command should never be repeated, even for one-way devices
    parent.handleGroupStopPositionChange(device)
    // Don't refresh - position is now unknown after Hold command
}

def refresh() {
    log.debug "Refreshing shade group status"
    parent.handleGroupRefresh(device)
}

def fixGroupState(state) {
	parent.fixGroupState(device, state)
}

def updateShadeState(windowShadeValue, positionValue, switchValue) {
    sendEvent(name: "windowShade", value: windowShadeValue)
    sendEvent(name: "position", value: positionValue)
    sendEvent(name: "switch", value: switchValue)
    
    // Update group state based on position
    if (positionValue == 0) {
        sendEvent(name: "groupState", value: "closed")
    } else if (positionValue == 100) {
        sendEvent(name: "groupState", value: "open")
    } else {
        sendEvent(name: "groupState", value: "mixed")
    }
}

// Communication type helper methods
def isOneWay() {
    return settings?.communicationType == "one-way"
}

def getRepeatCount() {
    return settings?.repeatCount ?: 3
}

def shouldRepeatCommand(command) {
    // Always repeat for one-way devices, except for specific commands that shouldn't be repeated
    if (!isOneWay()) return false
    
    // List of commands that should not be repeated even for one-way devices
    def noRepeatCommands = ["stop", "hold", "lighton", "lightoff", "setlightlevel", "setbrightness"]
    
    return !noRepeatCommands.contains(command.toLowerCase())
}

def executeWithRepeat(command, action) {
    // Check if there's an ongoing command that should be cancelled
    if (state.currentCommand && state.currentCommand != command) {
        logDebug "Cancelling ongoing ${state.currentCommand} command due to new ${command} command"
        state.currentCommand = null
        state.commandStartTime = null
    }
    
    if (shouldRepeatCommand(command)) {
        def repeatCount = getRepeatCount()
        log.info "Executing ${command} command ${repeatCount} times for one-way device"
        
        // Set current command tracking
        state.currentCommand = command
        state.commandStartTime = now()
        
        for (int i = 0; i < repeatCount; i++) {
            // Check if command was cancelled during execution
            if (state.currentCommand != command) {
                logDebug "Command ${command} was cancelled during repeat cycle"
                return
            }
            
            if (i > 0) {
                logDebug "Pausing before repeat ${i+1} of ${command} command"
                pauseExecution(500) // 500 ms between repeats (adjust as needed)
                
                // Check again after pause in case command was cancelled during pause
                if (state.currentCommand != command) {
                    logDebug "Command ${command} was cancelled during pause"
                    return
                }
            }
            logDebug "Executing repeat ${i+1} of ${command} command"
            action()
        }
        
        // Clear command tracking after successful completion
        if (state.currentCommand == command) {
            state.currentCommand = null
            state.commandStartTime = null
            logDebug "Completed ${command} command repeat cycle"
        }
    } else {
        logDebug "Executing ${command} command (no repeat)"
        action()
    }
}

def executeDelayedCommand(data) {
    data.action()
}

def logDebug(msg) {
    log.debug msg
}
