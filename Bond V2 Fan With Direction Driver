/**
 *  Bond V2 Fan With Direction Driver
 *
 *  Copyright 2019-2020 Dominick Meglio
 *  Copyright 2025 Simon Mason
 *
 * Original Revision History (by Dominick Meglio)
 * 2019.XX.XX - Initial fan driver implementation for Bond integration
 * 2019.11.24 - Added support for timer based fan light dimmers and flame height adjustment for fireplaces
 * 2019.12.01 - Fixed an issue where dimmers wouldn't work with fans that support direction controls
 * 2020.01.02 - Fixed an issue where fan speed wouldn't be set properly
 * 2020.03.23 - Added the ability to fix device state when it's out of sync
 * 2020.06.28 - Added toggle command to all devices
 * 
 * V2 Revision History (by Simon Mason)
 * 2.00 - 2025.01.01 - Enhanced fan control with direction support and improved state tracking, multi-hub support
 * 2.01 - 2025.01.01 - Added proper SwitchLevel capability and direction reversal commands
 * 2.02 - 2025.01.01 - Improved refresh functionality and state synchronization with Bond hub
 * 2.03 - 2025.01.01 - Fixed direction state handling and added breeze mode support
 * 2.06 - 2025.07.03 - (revert) Removed all light support logic and restored to pre-light state.
 *
 */
metadata {
    definition (
		name: "Bond V2 Fan With Direction Driver", 
		namespace: "simonmason", 
		author: "Simon Mason",
		importUrl: "https://raw.githubusercontent.com/simonmason/hubitat-bond-v2/master/drivers/Bond_Fan_With_Direction_V2.groovy"
	) {
        capability "FanControl"
        capability "Switch"
        capability "SwitchLevel"
        capability "Refresh"
        
        command "high"
        command "medium"
        command "low"
        command "off"
        command "setSpeed", [[name: "fanspeed*", type: "ENUM", description: "Fan Speed", constraints: ["low","medium-low","medium","medium-high","high","on","off","auto"]]]
        command "cycleSpeed"
        command "setDirection", [[name: "direction*", type: "ENUM", description: "Direction", constraints: ["forward", "reverse"]]]
        command "reverseDirection"
        command "breeze", [[name:"breezeValue*", type: "ENUM", description: "Breeze", constraints: ["off", "on"] ] ]
        command "fixFan", [[name:"Fan*", type: "ENUM", description: "Fan", constraints: ["on","off"] ] ]
        command "toggle"
        
        attribute "speed", "enum", ["low","medium-low","medium","medium-high","high","on","off","auto"]
        attribute "direction", "enum", ["forward", "reverse"]
        attribute "breeze", "enum", ["off", "on"]
    }
    
    preferences {
        input("speedLevels", "enum", title: "Fan Speed Levels", 
              options: ["3": "3 Speed (Low/Medium/High)", "5": "5 Speed (Low/Med-Low/Med/Med-High/High)"], 
              defaultValue: "3", required: true,
              description: "Select the number of speeds your fan supports")
    }
}

def installed() {
    log.debug "Bond V2 Fan With Direction Driver installed"
    initialize()
}

def updated() {
    log.debug "Bond V2 Fan With Direction Driver updated"
    initialize()
}

def initialize() {
    log.debug "Initializing Bond V2 Fan With Direction Driver"
    sendEvent(name: "speed", value: "off")
    sendEvent(name: "switch", value: "off")
    sendEvent(name: "level", value: 0)
    sendEvent(name: "direction", value: "forward")
    sendEvent(name: "breeze", value: "off")
    unschedule()
}

// FanControl capability methods
def setSpeed(fanspeed) {
    log.info "Setting fan speed to ${fanspeed}"
    parent.handleFanSpeed(device, fanspeed)
}

def cycleSpeed() {
    log.debug "Cycling fan speed"
    parent.handleFanCycleSpeed(device)
}

// Direct speed commands
def high() {
    def speedLevels = settings?.speedLevels ?: "3"
    if (speedLevels == "3") {
        setSpeed("high")
    } else {
        setSpeed("high")
    }
}

def medium() {
    def speedLevels = settings?.speedLevels ?: "3"
    if (speedLevels == "3") {
        setSpeed("medium")
    } else {
        setSpeed("medium")
    }
}

def low() {
    setSpeed("low")
}

// Direction control
def setDirection(direction) {
    log.info "Setting fan direction to ${direction}"
    parent.handleFanDirection(device, direction)
}

def reverseDirection() {
    def currentDirection = device.currentValue("direction") ?: "forward"
    def newDirection = (currentDirection == "forward") ? "reverse" : "forward"
    log.debug "Reversing fan direction from ${currentDirection} to ${newDirection}"
    setDirection(newDirection)
}

// SwitchLevel capability (for apps that use dimmer-style control)
def setLevel(level, duration) {
    // Ignore duration for fans
    setLevel(level)
}

// Breeze mode
def breeze(breezeValue) {
    log.debug "Setting breeze mode to ${breezeValue}"
    parent.handleFanBreeze(device, breezeValue)
}

// Fix fan state
def fixFan(fanState) {
    parent.fixFanState(device, fanState)
}

def refresh() {
    log.debug "Refreshing fan status"
    parent.handleFanRefresh(device)
}

// Update fan speed and related attributes
def updateFanSpeed(speed) {
    sendEvent(name: "speed", value: speed)
    
    def speedLevels = settings?.speedLevels ?: "3"
    
    // Update switch state
    if (speed == "off") {
        sendEvent(name: "switch", value: "off")
        sendEvent(name: "level", value: 0)
    } else {
        sendEvent(name: "switch", value: "on")
        
        // Convert speed to level percentage based on speed levels
        def levelValue = 0
        if (speedLevels == "3") {
            // 3-speed mapping
            switch (speed) {
                case "low":
                    levelValue = 25  // Mid-point of 1-33% range
                    break
                case "medium":
                case "medium-low":  // Map medium-low to medium for 3-speed fans
                    levelValue = 50  // Mid-point of 34-66% range
                    break
                case "high":
                case "medium-high": // Map medium-high to high for 3-speed fans
                    levelValue = 85  // Mid-point of 67-100% range
                    break
                case "on":
                    levelValue = 50  // Default to medium
                    break
                case "auto":
                    levelValue = 50  // Auto mode
                    break
                default:
                    levelValue = 50
            }
        } else {
            // 5-speed mapping
            switch (speed) {
                case "low":
                    levelValue = 15
                    break
                case "medium-low":
                    levelValue = 35
                    break
                case "medium":
                    levelValue = 55
                    break
                case "medium-high":
                    levelValue = 75
                    break
                case "high":
                    levelValue = 95
                    break
                case "on":
                    levelValue = 55  // Default to medium
                    break
                case "auto":
                    levelValue = 50  // Auto mode
                    break
                default:
                    levelValue = 55
            }
        }
        sendEvent(name: "level", value: levelValue)
    }
}

def updateFanDirection(direction) {
    sendEvent(name: "direction", value: direction)
}

def updateBreezeMode(breeze) {
    sendEvent(name: "breeze", value: breeze)
}
