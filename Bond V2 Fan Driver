/**
 *  Bond V2 Fan Driver
 *
 *  Copyright 2019-2020 Dominick Meglio
 *  Copyright 2025 Simon Mason
 *
 * Original Revision History (by Dominick Meglio)
 * 2019.XX.XX - Initial fan driver implementation for Bond integration
 * 2019.11.24 - Added support for timer based fan light dimmers and flame height adjustment for fireplaces
 * 2019.12.01 - Fixed an issue where dimmers wouldn't work with fans that support direction controls
 * 2020.01.02 - Fixed an issue where fan speed wouldn't be set properly
 * 2020.03.23 - Added the ability to fix device state when it's out of sync
 * 2020.06.28 - Added toggle command to all devices
 * 
 * V2 Revision History (by Simon Mason)
 * 2.00 - 2025.07.02 - Enhanced fan control with improved speed handling and state tracking, multi-hub support
 * 2.01 - 2025.07.02 - Added proper SwitchLevel capability support for percentage-based control
 * 2.02 - 2025.07.02 - Improved refresh functionality and state synchronization with Bond hub
 * 2.03 - 2025.07.02 - Fixed fan speed transitions and added breeze mode support
 * 2.06 - 2025.07.03 - (revert) Removed all light support logic and restored to pre-light state.
 * 2.07 - 2025.07.03 - Added optional light support for fans with built-in lights
 * 2.08 - 2025.07.03 - Fixed light capability implementation and separated fan/light controls
 * 2.09 - 2025.07.09 - Added One-Way/Two-Way communication preference with command repeat functionality
 * 2.10 - 2025.07.09 - Fixed runIn issues by switching to pauseExecution, added command cancellation logic
 * 2.11 - 2025.07.19 - Fixed fan state synchronization issue where speed was incorrectly set when fan is powered off
 * 2.12 - 2025.08.20 - Fixed light state overriding main switch state - main switch now correctly represents fan power state
 *
 */
metadata {
    definition (
		name: "Bond V2 Fan Driver", 
		namespace: "simonmason", 
		author: "Simon Mason",
		importUrl: "https://raw.githubusercontent.com/simonmason/hubitat-bond-v2/master/Bond%20V2%20Fan%20Driver"
	) {
        capability "FanControl"
        capability "Switch"
        capability "SwitchLevel"
        capability "Refresh"
        capability "Light"
        
        command "high"
        command "medium"
        command "low"
        command "off"
        command "setSpeed", [[name: "fanspeed*", type: "ENUM", description: "Fan Speed", constraints: ["low","medium-low","medium","medium-high","high","on","off","auto"]]]
        command "cycleSpeed"
        command "breeze", [[name:"breezeValue*", type: "ENUM", description: "Breeze", constraints: ["off", "on"] ] ]
        command "fixFan", [[name:"Fan*", type: "ENUM", description: "Fan", constraints: ["on","off"] ] ]
        command "toggle"
        command "lightOn"
        command "lightOff"
        command "lightToggle"
        command "setLightLevel", [[name: "level*", type: "NUMBER", description: "Light Level (0-100)"]]
        
        attribute "speed", "enum", ["low","medium-low","medium","medium-high","high","on","off","auto"]
        attribute "breeze", "enum", ["off", "on"]
        attribute "hasLight", "enum", ["true", "false"]
        attribute "lightSwitch", "enum", ["on", "off"]
        attribute "lightLevel", "number"
    }
    
    preferences {
        input("speedLevels", "enum", title: "Fan Speed Levels", 
              options: ["3": "3 Speed (Low/Medium/High)", "5": "5 Speed (Low/Med-Low/Med/Med-High/High)"], 
              defaultValue: "3", required: true,
              description: "Select the number of speeds your fan supports")
        
        input("communicationType", "enum", title: "Communication Type", 
              options: ["two-way": "Two-Way (Default)", "one-way": "One-Way"], 
              defaultValue: "two-way", required: true,
              description: "Select communication type for this device")
        
        input("repeatCount", "number", title: "Command Repeat Count (One-Way Only)", 
              defaultValue: 3, range: "1..5", required: false,
              description: "Number of times to repeat commands for one-way devices (1-5)")
    }
}

def installed() {
    log.debug "Bond V2 Fan Driver installed"
    initialize()
}

def updated() {
    log.debug "Bond V2 Fan Driver updated"
    initialize()
}

def initialize() {
    log.debug "Initializing Bond V2 Fan Driver"
    sendEvent(name: "speed", value: "off")
    sendEvent(name: "switch", value: "off")
    sendEvent(name: "level", value: 0)
    sendEvent(name: "breeze", value: "off")
    sendEvent(name: "hasLight", value: "false")
    sendEvent(name: "lightSwitch", value: "off")
    sendEvent(name: "lightLevel", value: 0)
    
    // Debug logging to check capabilities
    log.debug "Device capabilities: ${device.getCapabilities()}"
    log.debug "Device type: ${device.typeName}"
    log.debug "hasLight attribute: ${device.currentValue('hasLight')}"
    
    unschedule()
    
    // Initialize command tracking
    state.currentCommand = null
    state.commandStartTime = null
}

// Check if light is supported
def isLightSupported() {
    return device.currentValue("hasLight") == "true"
}

// Fan control methods (primary functionality)
def on() {
    log.info "Turning on fan"
    setSpeed("on")
}

def off() {
    log.info "Turning off fan"
    setSpeed("off")
}

def setSpeed(fanspeed) {
    log.info "Setting fan speed to ${fanspeed}"
    executeWithRepeat("setSpeed", { parent.handleFanSpeed(device, fanspeed) })
}

def cycleSpeed() {
    log.debug "Cycling fan speed"
    executeWithRepeat("cycleSpeed", { parent.handleFanCycleSpeed(device) })
}

// Direct speed commands
def high() {
    setSpeed("high")
}

def medium() {
    setSpeed("medium")
}

def low() {
    setSpeed("low")
}

// SwitchLevel capability (for fan speed control)
def setLevel(level) {
    log.info "Setting fan level to ${level}%"
    def speedLevels = settings?.speedLevels ?: "3"
    if (level == 0) {
        setSpeed("off")
    } else if (speedLevels == "3") {
        if (level <= 33) {
            setSpeed("low")
        } else if (level <= 66) {
            setSpeed("medium")
        } else {
            setSpeed("high")
        }
    } else {
        if (level <= 20) {
            setSpeed("low")
        } else if (level <= 40) {
            setSpeed("medium-low")
        } else if (level <= 60) {
            setSpeed("medium")
        } else if (level <= 80) {
            setSpeed("medium-high")
        } else {
            setSpeed("high")
        }
    }
}

def setLevel(level, duration) {
    setLevel(level)
}

// Light control methods (only available if device has light)
def lightOn() {
    if (isLightSupported()) {
        log.info "Turning on fan light"
        executeWithRepeat("lightOn", { parent.handleFanLightOn(device) })
    } else {
        log.warn "Light not supported on this device"
    }
}

def lightOff() {
    if (isLightSupported()) {
        log.info "Turning off fan light"
        executeWithRepeat("lightOff", { parent.handleFanLightOff(device) })
    } else {
        log.warn "Light not supported on this device"
    }
}

def setLightLevel(level) {
    if (isLightSupported()) {
        log.info "Setting light level to ${level}%"
        executeWithRepeat("setLightLevel", { parent.handleFanLightLevel(device, level) })
    } else {
        log.warn "Light not supported on this device"
    }
}

def lightToggle() {
    if (isLightSupported()) {
        log.info "Toggling fan light using Bond API"
        executeWithRepeat("lightToggle", { parent.handleFanLightToggle(device) })
    } else {
        log.warn "Light not supported on this device"
    }
}

// Breeze mode
def breeze(breezeValue) {
    log.debug "Setting breeze mode to ${breezeValue}"
    executeWithRepeat("breeze", { parent.handleFanBreeze(device, breezeValue) })
}

// Fix fan state
def fixFan(fanState) {
    parent.fixFanState(device, fanState)
}

def refresh() {
    log.debug "Refreshing fan status"
    parent.handleFanRefresh(device)
}

// Update fan speed and related attributes
def updateFanSpeed(speed) {
    sendEvent(name: "speed", value: speed)
    
    def speedLevels = settings?.speedLevels ?: "3"
    
    // Update switch state
    if (speed == "off") {
        sendEvent(name: "switch", value: "off")
        sendEvent(name: "level", value: 0)
    } else {
        sendEvent(name: "switch", value: "on")
        
        // Convert speed to level percentage based on speed levels
        def levelValue = 0
        if (speedLevels == "3") {
            // 3-speed mapping
            switch (speed) {
                case "low":
                    levelValue = 25  // Mid-point of 1-33% range
                    break
                case "medium":
                case "medium-low":  // Map medium-low to medium for 3-speed fans
                    levelValue = 50  // Mid-point of 34-66% range
                    break
                case "high":
                case "medium-high": // Map medium-high to high for 3-speed fans
                    levelValue = 85  // Mid-point of 67-100% range
                    break
                case "on":
                    levelValue = 50  // Default to medium
                    break
                case "auto":
                    levelValue = 50  // Auto mode
                    break
                default:
                    levelValue = 50
            }
        } else {
            // 5-speed mapping
            switch (speed) {
                case "low":
                    levelValue = 15
                    break
                case "medium-low":
                    levelValue = 35
                    break
                case "medium":
                    levelValue = 55
                    break
                case "medium-high":
                    levelValue = 75
                    break
                case "high":
                    levelValue = 95
                    break
                case "on":
                    levelValue = 55  // Default to medium
                    break
                case "auto":
                    levelValue = 50  // Auto mode
                    break
                default:
                    levelValue = 55
            }
        }
        sendEvent(name: "level", value: levelValue)
    }
}

def updateBreezeMode(breeze) {
    sendEvent(name: "breeze", value: breeze)
}
// Light state update methods
def updateLightState(lightState) {
    if (isLightSupported()) {
        sendEvent(name: "lightSwitch", value: lightState)
        // Don't update the main switch attribute - it should represent fan state, not light state
        // sendEvent(name: "switch", value: lightState)
    }
}

def updateLightLevel(level) {
    if (isLightSupported()) {
        sendEvent(name: "lightLevel", value: level)
        // Also update the main level attribute for Light capability compatibility
        sendEvent(name: "level", value: level)
    }
}

// Update hasLight attribute (called by app during device creation/migration)
def updateHasLight(hasLight) {
    sendEvent(name: "hasLight", value: hasLight ? "true" : "false")
    log.info "Updated hasLight attribute to: ${hasLight}"
}

// Communication type helper methods
def isOneWay() {
    return settings?.communicationType == "one-way"
}

def getRepeatCount() {
    return settings?.repeatCount ?: 3
}

def shouldRepeatCommand(command) {
    // Always repeat for one-way devices, except for specific commands that shouldn't be repeated
    if (!isOneWay()) return false
    
    // List of commands that should not be repeated even for one-way devices
    def noRepeatCommands = ["stop", "hold", "lighton", "lightoff", "setlightlevel", "setbrightness"]
    
    return !noRepeatCommands.contains(command.toLowerCase())
}

def executeWithRepeat(command, action) {
    // Check if there's an ongoing command that should be cancelled
    if (state.currentCommand && state.currentCommand != command) {
        logDebug "Cancelling ongoing ${state.currentCommand} command due to new ${command} command"
        state.currentCommand = null
        state.commandStartTime = null
    }
    
    if (shouldRepeatCommand(command)) {
        def repeatCount = getRepeatCount()
        log.info "Executing ${command} command ${repeatCount} times for one-way device"
        
        // Set current command tracking
        state.currentCommand = command
        state.commandStartTime = now()
        
        for (int i = 0; i < repeatCount; i++) {
            // Check if command was cancelled during execution
            if (state.currentCommand != command) {
                logDebug "Command ${command} was cancelled during repeat cycle"
                return
            }
            
            if (i > 0) {
                logDebug "Pausing before repeat ${i+1} of ${command} command"
                pauseExecution(500) // 500 ms between repeats (adjust as needed)
                
                // Check again after pause in case command was cancelled during pause
                if (state.currentCommand != command) {
                    logDebug "Command ${command} was cancelled during pause"
                    return
                }
            }
            logDebug "Executing repeat ${i+1} of ${command} command"
            action()
        }
        
        // Clear command tracking after successful completion
        if (state.currentCommand == command) {
            state.currentCommand = null
            state.commandStartTime = null
            logDebug "Completed ${command} command repeat cycle"
        }
    } else {
        logDebug "Executing ${command} command (no repeat)"
        action()
    }
}

def executeDelayedCommand(data) {
    data.action()
}

def logDebug(msg) {
    log.debug msg
}
