/**
 *  Bond V2 Shade Driver
 *
 *  Copyright 2019-2020 Dominick Meglio
 *  Copyright 2025 Simon Mason
 *
 * Original Revision History (by Dominick Meglio)
 * - Original shade driver implementation
 * 
 * V2 Revision History (by Simon Mason)
 * 2.00 - 2025.01.01 - Enhanced setPosition with proper Bond API SetPosition support, improved position handling
 * 2.01 - 2025.01.01 - Added proper state tracking for position changes, improved refresh functionality
 * 2.02 - 2025.01.01 - Fixed startPositionChange to track movement and auto-update at limits
 * 2.03 - 2025.01.01 - Implemented unknown state for stopPositionChange, removed redundant movement tracking
 * 2.04 - 2025.01.01 - Added One-Way/Two-Way communication preference with command repeat functionality
 * 2.05 - 2025.01.01 - Fixed runIn issues by switching to pauseExecution, added command cancellation logic
 *
 */
metadata {
    definition (
		name: "Bond V2 Shade Driver", 
		namespace: "simonmason", 
		author: "Simon Mason",
		importUrl: "https://raw.githubusercontent.com/simonmason/hubitat-bond-v2/master/drivers/Bond_V2_Shade_Driver.groovy"
	) {
        capability "WindowShade"
		capability "Switch"
		capability "Refresh"
		
        command "stop"
        command "preset"
        command "startPositionChange", [[name: "direction*", type: "ENUM", description: "Direction", constraints: ["open", "close"]]]
        command "stopPositionChange"
        command "fixShade", [[name:"Shade*", type: "ENUM", description: "Shade", constraints: ["open","close"] ] ]
		command "toggle"
		
        attribute "position", "number"
        attribute "moving", "enum", ["opening", "closing", "stopped"]
    }
    
    preferences {
        input("communicationType", "enum", title: "Communication Type", 
              options: ["two-way": "Two-Way (Default)", "one-way": "One-Way"], 
              defaultValue: "two-way", required: true,
              description: "Select communication type for this device")
        
        input("repeatCount", "number", title: "Command Repeat Count (One-Way Only)", 
              defaultValue: 3, range: "1..5", required: false,
              description: "Number of times to repeat commands for one-way devices (1-5)")
    }
}

def installed() {
    log.debug "Bond V2 Shade Driver installed"
    initialize()
}

def updated() {
    log.debug "Bond V2 Shade Driver updated"
    initialize()
}

def initialize() {
    log.debug "Initializing Bond V2 Shade Driver"
    sendEvent(name: "position", value: 100) // Default position - closed
    sendEvent(name: "windowShade", value: "closed")
    sendEvent(name: "switch", value: "off")
    sendEvent(name: "moving", value: "stopped")
    unschedule()
    
    // Initialize command tracking
    state.currentCommand = null
    state.commandStartTime = null
}

def open() {
	executeWithRepeat("open", { parent.handleOpen(device) })
}

def close() {
	executeWithRepeat("close", { parent.handleClose(device) })
}

def on() {
	open()
}

def off() {
	close()
}

def toggle() {
	def currentState = device.currentValue("windowShade")
	if (currentState == "open") {
		close()
	} else {
		open()
	}
}

def stop() {
    logDebug "stop() called"
    // Stop command should never be repeated, even for one-way devices
    parent.handleStop(device)
}

def preset() {
	executeWithRepeat("preset", { parent.handlePreset(device) })
}

def fixShade(shade) {
	parent.fixShadeState(device, shade)
}

def setPosition(Number position) {
    log.info "Setting shade position to ${position}%"
    
    // Validate position range
    if (position < 0) position = 0
    if (position > 100) position = 100
    
    // Handle special cases first for backward compatibility
    if (position == 0) {
        log.info "Position 0: Opening shade"
        open()
        return
    } else if (position == 100) {
        log.info "Position 100: Closing shade"
        close()
        return
    } else if (position == 50) {
        log.info "Position 50: Triggering preset"
        preset()
        return
    }
    
    // Try to use proper SetPosition API call
    executeWithRepeat("setPosition", { parent.handleSetPosition(device, position) })
}

def setLevel(Number level) {
    // Support for apps that use setLevel instead of setPosition
    setPosition(level)
}

def startPositionChange(direction) {
    log.debug "Starting position change: ${direction}"
    
    sendEvent(name: "moving", value: direction == "open" ? "opening" : "closing")
    
    if (direction == "open") {
        executeWithRepeat("startPositionChange", { parent.handleStartPositionChange(device, "open") })
    } else if (direction == "close") {
        executeWithRepeat("startPositionChange", { parent.handleStartPositionChange(device, "close") })
    } else {
        log.warn "Invalid direction for startPositionChange: ${direction}"
    }
    
    // Don't schedule complex tracking - let stopPositionChange or manual refresh handle final state
}

def stopPositionChange() {
    logDebug "stopPositionChange() called"
    unschedule(checkMovementProgress)
    sendEvent(name: "moving", value: "stopped")
    // Stop command should never be repeated, even for one-way devices
    parent.handleStopPositionChange(device)
    // Refresh position after a brief delay
    runIn(2, refresh)
}

def refresh() {
    log.debug "Refreshing shade status" 
    parent.handleShadeRefresh(device)
}

// Communication type helper methods
def isOneWay() {
    return settings?.communicationType == "one-way"
}

def getRepeatCount() {
    return settings?.repeatCount ?: 3
}

def shouldRepeatCommand(command) {
    // Always repeat for one-way devices, except for specific commands that shouldn't be repeated
    if (!isOneWay()) return false
    
    // List of commands that should not be repeated even for one-way devices
    def noRepeatCommands = ["stop", "hold", "lighton", "lightoff", "setlightlevel", "setbrightness"]
    
    return !noRepeatCommands.contains(command.toLowerCase())
}

def executeWithRepeat(command, action) {
    // Check if there's an ongoing command that should be cancelled
    if (state.currentCommand && state.currentCommand != command) {
        logDebug "Cancelling ongoing ${state.currentCommand} command due to new ${command} command"
        state.currentCommand = null
        state.commandStartTime = null
    }
    
    if (shouldRepeatCommand(command)) {
        def repeatCount = getRepeatCount()
        log.info "Executing ${command} command ${repeatCount} times for one-way device"
        
        // Set current command tracking
        state.currentCommand = command
        state.commandStartTime = now()
        
        for (int i = 0; i < repeatCount; i++) {
            // Check if command was cancelled during execution
            if (state.currentCommand != command) {
                logDebug "Command ${command} was cancelled during repeat cycle"
                return
            }
            
            if (i > 0) {
                logDebug "Pausing before repeat ${i+1} of ${command} command"
                pauseExecution(500) // 500 ms between repeats (adjust as needed)
                
                // Check again after pause in case command was cancelled during pause
                if (state.currentCommand != command) {
                    logDebug "Command ${command} was cancelled during pause"
                    return
                }
            }
            logDebug "Executing repeat ${i+1} of ${command} command"
            action()
        }
        
        // Clear command tracking after successful completion
        if (state.currentCommand == command) {
            state.currentCommand = null
            state.commandStartTime = null
            logDebug "Completed ${command} command repeat cycle"
        }
    } else {
        logDebug "Executing ${command} command (no repeat)"
        action()
    }
}

def executeDelayedCommand(data) {
    data.action()
}

def logDebug(msg) {
    log.debug msg
}
